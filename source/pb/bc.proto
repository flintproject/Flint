syntax = "proto2";

package bc;

message SectionHeader {

  required bytes id = 1;  /* 16 byte-length UUID */
  required int32 nob = 2; /* number of blocks */

}

message BlockHeader {

  required string name = 1;
  required int32 noir = 2; /* number of integer registers */
  required int32 nod = 3; /* number of data */
  required int32 noc = 4; /* number of code */

}

message Br {

  required int32 a = 1;
  optional int32 l = 2;
  optional int32 p = 3;

}

message Jmp {

  optional int32 l = 1;
  optional int32 p = 2;

}

message Call1 {

  enum Op {
    kAbs = 1;
    kArccos = 2;
    kArccosh = 3;
    kArccot = 4;
    kArccoth = 5;
    kArccsc = 6;
    kArccsch = 7;
    kArcsec = 8;
    kArcsech = 9;
    kArcsin = 10;
    kArcsinh = 11;
    kArctan = 12;
    kArctanh = 13;
    kCeiling = 14;
    kCos = 15;
    kCosh = 16;
    kCot = 17;
    kCoth = 18;
    kCsc = 19;
    kCsch = 20;
    kExp = 21;
    kFactorial = 33;
    kFloor = 22;
    kLn = 23;
    kLog10 = 32;
    kMinus1 = 24;
    kRoot1 = 25;
    kSec = 26;
    kSech = 27;
    kSin = 28;
    kSinh = 29;
    kTan = 30;
    kTanh = 31;
  }

  required int32 a  = 1;
  required Op op    = 2;
  required int32 a1 = 3;

}

message Call2 {

  enum Op {
    kDivide = 2;
    kEq = 3;
    kGeq = 4;
    kGt = 5;
    kLeq = 6;
    kLog = 16;
    kLt = 7;
    kMax = 8;
    kMin = 9;
    kMinus2 = 10;
    kModulo = 18;
    kNeq = 11;
    kPlus = 12;
    kPower = 13;
    kRemainder = 17;
    kRoot2 = 14;
    kTimes = 15;
  }

  required int32 a  = 1;
  required Op op    = 2;
  required int32 a1 = 3;
  required int32 a2 = 4;

}

message Lb {

  required int32 a  = 1;
  required string v = 2;
  optional int32 so = 3; /* sector offset */
  required int32 d  = 4;

}

/* "Load chunk" */
message Lc {

  required int32 a  = 1;
  required int32 i0 = 2; /* channel index */
  required int32 d  = 3;

}

message Ld {

  required int32 a  = 1;
  required int32 i0 = 2;
  required int32 i1 = 3;
  required int32 d  = 4;

}

message Gen1 {

  enum Type {
    kExponentialVariate = 1;
    kPoissonVariate = 2;
  }

  required int32 a   = 1;
  required Type type = 2;
  required int32 a1  = 3;

}

message Gen2 {

  enum Type {
    kGammaVariate = 1;
    kGaussVariate = 2;
    kLognormalVariate = 4;
    kUniformVariate = 3;
    kWeibullVariate = 5;
  }

  required int32 a   = 1;
  required Type type = 2;
  required int32 a1  = 3;
  required int32 a2  = 4;

}

message Load {

  required int32 a  = 1;
  optional string v = 2;
  optional int32 so = 3; /* sector offset */
  optional int32 lo = 4; /* layer offset */

}

message Loadi {

  required int32 a  = 1;
  required double v = 2;

}

message Store {

  optional string v = 1;
  optional int32 so = 2; /* sector offset */
  optional int32 lo = 3; /* layer offset */
  required int32 a  = 4;

}

message Refer {

  required int32 i0 = 1; /* target register */
  optional string v = 2; /* operand variable name */
  optional int32 so = 3; /* sector offset */
  optional int32 lo = 4; /* layer offset */

}

message Deref {

  required int32 f0 = 1; /* target floating-point register */
  required int32 i1 = 2; /* operand register */
  required int32 k = 3;  /* offset */

}

message Alloc {

  required int32 i0 = 1; /* target register */
  required int32 k = 2;  /* size */

}

message Save {

  optional string v = 1; /* target variable name */
  optional int32 so = 2; /* sector offset */
  optional int32 lo = 3; /* layer offset */
  required int32 i1 = 4; /* operand register */
  required int32 k = 5;  /* size */

}

message Move {

  required int32 i0 = 1; /* target register */
  required int32 f1 = 2; /* operand floating-point register */
  required int32 k = 3; /* offset */

}

message Transpose {

  required int32 i0 = 1; /* target register */
  required int32 i1 = 2; /* operand register */
  required int32 kr = 3; /* resulting # of rows */
  required int32 kc = 4; /* resulting # of columns */

}

message Outerproduct {

  required int32 i0 = 1; /* target register */
  required int32 k1 = 2; /* size of operand 1 */
  required int32 i1 = 3; /* operand register 1 */
  required int32 k2 = 4; /* size of operand 2 */
  required int32 i2 = 5; /* operand register 2 */

}

message Scalarproduct {

  required int32 f0 = 1; /* target floating-point register */
  required int32 k = 2;  /* size of each operand */
  required int32 i1 = 3; /* operand register 1 */
  required int32 i2 = 4; /* operand register 2 */

}

message Vectorproduct {

  required int32 i0 = 1; /* target register */
  required int32 i1 = 2; /* operand register 1 */
  required int32 i2 = 3; /* operand register 2 */

}

message Determinant {

  required int32 f0 = 1; /* target floating-point register */
  required int32 k = 2;  /* # of columns of operand */
  required int32 i1 = 3; /* operand register */

}

message Select2 {

  required int32 f0 = 1; /* target floating-point register */
  required int32 i1 = 2; /* operand register */
  required int32 f2 = 3; /* index (1-based) */

}

message Select3 {

  required int32 f0 = 1; /* target floating-point register */
  required int32 kr = 2; /* # of rows */
  required int32 kc = 3; /* # of columns */
  required int32 i1 = 4; /* operand register */
  required int32 f2 = 5; /* row index (1-based) */
  required int32 f3 = 6; /* column index (1-based) */

}

/*
 * Select row
 */
message Selrow {

  required int32 i0 = 1; /* target register */
  required int32 kr = 2; /* # of rows */
  required int32 kc = 3; /* # of columns */
  required int32 i1 = 4; /* operand register 1 */
  required int32 f2 = 5; /* row index (1-based) */

}

message Mult {

  required int32 i0 = 1; /* target register */
  required int32 k = 2;  /* size */
  required int32 f1 = 3; /* operand floating-point register 1 */
  required int32 i2 = 4; /* operand register 2 */

}

/*
 * Matrix multiplication
 */
message Mmul {

  required int32 i0 = 1; /* target register */
  required int32 kr = 2; /* # of rows of operand 1 */
  required int32 kx = 3; /* # of columns of operand 1 */
  required int32 kc = 4; /* # of columns of operand 2 */
  required int32 i1 = 5; /* operand register 1 */
  required int32 i2 = 6; /* operand register 2 */

}

message Code {

  enum Type {
    kAlloc = 13;
    kBr = 1;
    kCall1 = 3;
    kCall2 = 4;
    kDeref = 14;
    kDeterminant = 15;
    kGen1 = 5;
    kGen2 = 6;
    kJmp = 2;
    kLb = 10;
    kLc = 28;
    kLd = 12;
    kLoad = 7;
    kLoadi = 8;
    kMmul = 16;
    kMove = 17;
    kMult = 18;
    kOuterproduct = 19;
    kRefer = 20;
    kRet   = 11;
    kSave = 21;
    kScalarproduct = 22;
    kSelect2 = 23;
    kSelect3 = 24;
    kSelrow = 25;
    kStore = 9;
    kTranspose = 26;
    kVectorproduct = 27;
  }

  required Type type = 1;

  optional Alloc alloc = 13;
  optional Br br = 2;
  optional Call1 call1 = 4;
  optional Call2 call2 = 5;
  optional Deref deref = 14;
  optional Determinant determinant = 15;
  optional Gen1 gen1 = 6;
  optional Gen2 gen2 = 7;
  optional Jmp jmp = 3;
  optional Lb lb = 11;
  optional Lc lc = 28;
  optional Ld ld = 12;
  optional Load load = 8;
  optional Loadi loadi = 9;
  optional Mmul mmul = 16;
  optional Move move = 17;
  optional Mult mult = 18;
  optional Outerproduct outerproduct = 19;
  optional Refer refer = 20;
  optional Save save = 21;
  optional Scalarproduct scalarproduct = 22;
  optional Select2 select2 = 23;
  optional Select3 select3 = 24;
  optional Selrow selrow = 25;
  optional Store store = 10;
  optional Transpose transpose = 26;
  optional Vectorproduct vectorproduct = 27;

}
